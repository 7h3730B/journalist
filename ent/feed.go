// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mrusme/journalist/ent/feed"
)

// Feed is the model entity for the Feed schema.
type Feed struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SiteURL holds the value of the "site_url" field.
	SiteURL string `json:"site_url,omitempty"`
	// FeedURL holds the value of the "feed_url" field.
	FeedURL string `json:"feed_url,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Copyright holds the value of the "copyright" field.
	Copyright string `json:"copyright,omitempty"`
	// Generator holds the value of the "generator" field.
	Generator string `json:"generator,omitempty"`
	// Categories holds the value of the "categories" field.
	Categories string `json:"categories,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedQuery when eager-loading is set.
	Edges FeedEdges `json:"edges"`
}

// FeedEdges holds the relations/edges for other nodes in the graph.
type FeedEdges struct {
	// Items holds the value of the items edge.
	Items []*Item `json:"items,omitempty"`
	// SubscribedUsers holds the value of the subscribed_users edge.
	SubscribedUsers []*User `json:"subscribed_users,omitempty"`
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e FeedEdges) ItemsOrErr() ([]*Item, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// SubscribedUsersOrErr returns the SubscribedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e FeedEdges) SubscribedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.SubscribedUsers, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_users"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e FeedEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[2] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feed) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case feed.FieldTitle, feed.FieldDescription, feed.FieldSiteURL, feed.FieldFeedURL, feed.FieldAuthor, feed.FieldLanguage, feed.FieldImage, feed.FieldCopyright, feed.FieldGenerator, feed.FieldCategories:
			values[i] = new(sql.NullString)
		case feed.FieldCreatedAt, feed.FieldUpdatedAt, feed.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case feed.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Feed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feed fields.
func (f *Feed) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feed.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case feed.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				f.Title = value.String
			}
		case feed.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case feed.FieldSiteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_url", values[i])
			} else if value.Valid {
				f.SiteURL = value.String
			}
		case feed.FieldFeedURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feed_url", values[i])
			} else if value.Valid {
				f.FeedURL = value.String
			}
		case feed.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				f.Author = value.String
			}
		case feed.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				f.Language = value.String
			}
		case feed.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				f.Image = value.String
			}
		case feed.FieldCopyright:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field copyright", values[i])
			} else if value.Valid {
				f.Copyright = value.String
			}
		case feed.FieldGenerator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field generator", values[i])
			} else if value.Valid {
				f.Generator = value.String
			}
		case feed.FieldCategories:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categories", values[i])
			} else if value.Valid {
				f.Categories = value.String
			}
		case feed.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case feed.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case feed.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = new(time.Time)
				*f.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryItems queries the "items" edge of the Feed entity.
func (f *Feed) QueryItems() *ItemQuery {
	return (&FeedClient{config: f.config}).QueryItems(f)
}

// QuerySubscribedUsers queries the "subscribed_users" edge of the Feed entity.
func (f *Feed) QuerySubscribedUsers() *UserQuery {
	return (&FeedClient{config: f.config}).QuerySubscribedUsers(f)
}

// QuerySubscriptions queries the "subscriptions" edge of the Feed entity.
func (f *Feed) QuerySubscriptions() *SubscriptionQuery {
	return (&FeedClient{config: f.config}).QuerySubscriptions(f)
}

// Update returns a builder for updating this Feed.
// Note that you need to call Feed.Unwrap() before calling this method if this Feed
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feed) Update() *FeedUpdateOne {
	return (&FeedClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Feed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feed) Unwrap() *Feed {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feed is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feed) String() string {
	var builder strings.Builder
	builder.WriteString("Feed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("title=")
	builder.WriteString(f.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("site_url=")
	builder.WriteString(f.SiteURL)
	builder.WriteString(", ")
	builder.WriteString("feed_url=")
	builder.WriteString(f.FeedURL)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(f.Author)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(f.Language)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(f.Image)
	builder.WriteString(", ")
	builder.WriteString("copyright=")
	builder.WriteString(f.Copyright)
	builder.WriteString(", ")
	builder.WriteString("generator=")
	builder.WriteString(f.Generator)
	builder.WriteString(", ")
	builder.WriteString("categories=")
	builder.WriteString(f.Categories)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Feeds is a parsable slice of Feed.
type Feeds []*Feed

func (f Feeds) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
