// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mrusme/journalist/ent/feed"
	"github.com/mrusme/journalist/ent/item"
	"github.com/mrusme/journalist/ent/subscription"
	"github.com/mrusme/journalist/ent/user"
)

// FeedCreate is the builder for creating a Feed entity.
type FeedCreate struct {
	config
	mutation *FeedMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (fc *FeedCreate) SetURL(s string) *FeedCreate {
	fc.mutation.SetURL(s)
	return fc
}

// SetUsername sets the "username" field.
func (fc *FeedCreate) SetUsername(s string) *FeedCreate {
	fc.mutation.SetUsername(s)
	return fc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (fc *FeedCreate) SetNillableUsername(s *string) *FeedCreate {
	if s != nil {
		fc.SetUsername(*s)
	}
	return fc
}

// SetPassword sets the "password" field.
func (fc *FeedCreate) SetPassword(s string) *FeedCreate {
	fc.mutation.SetPassword(s)
	return fc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (fc *FeedCreate) SetNillablePassword(s *string) *FeedCreate {
	if s != nil {
		fc.SetPassword(*s)
	}
	return fc
}

// SetFeedTitle sets the "feed_title" field.
func (fc *FeedCreate) SetFeedTitle(s string) *FeedCreate {
	fc.mutation.SetFeedTitle(s)
	return fc
}

// SetFeedDescription sets the "feed_description" field.
func (fc *FeedCreate) SetFeedDescription(s string) *FeedCreate {
	fc.mutation.SetFeedDescription(s)
	return fc
}

// SetFeedLink sets the "feed_link" field.
func (fc *FeedCreate) SetFeedLink(s string) *FeedCreate {
	fc.mutation.SetFeedLink(s)
	return fc
}

// SetFeedFeedLink sets the "feed_feed_link" field.
func (fc *FeedCreate) SetFeedFeedLink(s string) *FeedCreate {
	fc.mutation.SetFeedFeedLink(s)
	return fc
}

// SetFeedUpdated sets the "feed_updated" field.
func (fc *FeedCreate) SetFeedUpdated(s string) *FeedCreate {
	fc.mutation.SetFeedUpdated(s)
	return fc
}

// SetFeedPublished sets the "feed_published" field.
func (fc *FeedCreate) SetFeedPublished(s string) *FeedCreate {
	fc.mutation.SetFeedPublished(s)
	return fc
}

// SetFeedAuthor sets the "feed_author" field.
func (fc *FeedCreate) SetFeedAuthor(s string) *FeedCreate {
	fc.mutation.SetFeedAuthor(s)
	return fc
}

// SetFeedAuthors sets the "feed_authors" field.
func (fc *FeedCreate) SetFeedAuthors(s string) *FeedCreate {
	fc.mutation.SetFeedAuthors(s)
	return fc
}

// SetFeedLanguage sets the "feed_language" field.
func (fc *FeedCreate) SetFeedLanguage(s string) *FeedCreate {
	fc.mutation.SetFeedLanguage(s)
	return fc
}

// SetFeedImage sets the "feed_image" field.
func (fc *FeedCreate) SetFeedImage(s string) *FeedCreate {
	fc.mutation.SetFeedImage(s)
	return fc
}

// SetFeedCopyright sets the "feed_copyright" field.
func (fc *FeedCreate) SetFeedCopyright(s string) *FeedCreate {
	fc.mutation.SetFeedCopyright(s)
	return fc
}

// SetFeedGenerator sets the "feed_generator" field.
func (fc *FeedCreate) SetFeedGenerator(s string) *FeedCreate {
	fc.mutation.SetFeedGenerator(s)
	return fc
}

// SetFeedCategories sets the "feed_categories" field.
func (fc *FeedCreate) SetFeedCategories(s string) *FeedCreate {
	fc.mutation.SetFeedCategories(s)
	return fc
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeedCreate) SetCreatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableCreatedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeedCreate) SetUpdatedAt(t time.Time) *FeedCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableUpdatedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FeedCreate) SetDeletedAt(t time.Time) *FeedCreate {
	fc.mutation.SetDeletedAt(t)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FeedCreate) SetNillableDeletedAt(t *time.Time) *FeedCreate {
	if t != nil {
		fc.SetDeletedAt(*t)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FeedCreate) SetID(u uuid.UUID) *FeedCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FeedCreate) SetNillableID(u *uuid.UUID) *FeedCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// AddItemIDs adds the "items" edge to the Item entity by IDs.
func (fc *FeedCreate) AddItemIDs(ids ...uuid.UUID) *FeedCreate {
	fc.mutation.AddItemIDs(ids...)
	return fc
}

// AddItems adds the "items" edges to the Item entity.
func (fc *FeedCreate) AddItems(i ...*Item) *FeedCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return fc.AddItemIDs(ids...)
}

// AddSubscribedUserIDs adds the "subscribed_users" edge to the User entity by IDs.
func (fc *FeedCreate) AddSubscribedUserIDs(ids ...uuid.UUID) *FeedCreate {
	fc.mutation.AddSubscribedUserIDs(ids...)
	return fc
}

// AddSubscribedUsers adds the "subscribed_users" edges to the User entity.
func (fc *FeedCreate) AddSubscribedUsers(u ...*User) *FeedCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fc.AddSubscribedUserIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (fc *FeedCreate) AddSubscriptionIDs(ids ...uuid.UUID) *FeedCreate {
	fc.mutation.AddSubscriptionIDs(ids...)
	return fc
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (fc *FeedCreate) AddSubscriptions(s ...*Subscription) *FeedCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return fc.AddSubscriptionIDs(ids...)
}

// Mutation returns the FeedMutation object of the builder.
func (fc *FeedCreate) Mutation() *FeedMutation {
	return fc.mutation
}

// Save creates the Feed in the database.
func (fc *FeedCreate) Save(ctx context.Context) (*Feed, error) {
	var (
		err  error
		node *Feed
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Feed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FeedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedCreate) SaveX(ctx context.Context) *Feed {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeedCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := feed.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := feed.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := feed.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedCreate) check() error {
	if _, ok := fc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Feed.url"`)}
	}
	if v, ok := fc.mutation.URL(); ok {
		if err := feed.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Feed.url": %w`, err)}
		}
	}
	if _, ok := fc.mutation.FeedTitle(); !ok {
		return &ValidationError{Name: "feed_title", err: errors.New(`ent: missing required field "Feed.feed_title"`)}
	}
	if _, ok := fc.mutation.FeedDescription(); !ok {
		return &ValidationError{Name: "feed_description", err: errors.New(`ent: missing required field "Feed.feed_description"`)}
	}
	if _, ok := fc.mutation.FeedLink(); !ok {
		return &ValidationError{Name: "feed_link", err: errors.New(`ent: missing required field "Feed.feed_link"`)}
	}
	if _, ok := fc.mutation.FeedFeedLink(); !ok {
		return &ValidationError{Name: "feed_feed_link", err: errors.New(`ent: missing required field "Feed.feed_feed_link"`)}
	}
	if _, ok := fc.mutation.FeedUpdated(); !ok {
		return &ValidationError{Name: "feed_updated", err: errors.New(`ent: missing required field "Feed.feed_updated"`)}
	}
	if _, ok := fc.mutation.FeedPublished(); !ok {
		return &ValidationError{Name: "feed_published", err: errors.New(`ent: missing required field "Feed.feed_published"`)}
	}
	if _, ok := fc.mutation.FeedAuthor(); !ok {
		return &ValidationError{Name: "feed_author", err: errors.New(`ent: missing required field "Feed.feed_author"`)}
	}
	if _, ok := fc.mutation.FeedAuthors(); !ok {
		return &ValidationError{Name: "feed_authors", err: errors.New(`ent: missing required field "Feed.feed_authors"`)}
	}
	if _, ok := fc.mutation.FeedLanguage(); !ok {
		return &ValidationError{Name: "feed_language", err: errors.New(`ent: missing required field "Feed.feed_language"`)}
	}
	if _, ok := fc.mutation.FeedImage(); !ok {
		return &ValidationError{Name: "feed_image", err: errors.New(`ent: missing required field "Feed.feed_image"`)}
	}
	if _, ok := fc.mutation.FeedCopyright(); !ok {
		return &ValidationError{Name: "feed_copyright", err: errors.New(`ent: missing required field "Feed.feed_copyright"`)}
	}
	if _, ok := fc.mutation.FeedGenerator(); !ok {
		return &ValidationError{Name: "feed_generator", err: errors.New(`ent: missing required field "Feed.feed_generator"`)}
	}
	if _, ok := fc.mutation.FeedCategories(); !ok {
		return &ValidationError{Name: "feed_categories", err: errors.New(`ent: missing required field "Feed.feed_categories"`)}
	}
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Feed.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Feed.updated_at"`)}
	}
	return nil
}

func (fc *FeedCreate) sqlSave(ctx context.Context) (*Feed, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (fc *FeedCreate) createSpec() (*Feed, *sqlgraph.CreateSpec) {
	var (
		_node = &Feed{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: feed.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: feed.FieldID,
			},
		}
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := fc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldUsername,
		})
		_node.Username = &value
	}
	if value, ok := fc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldPassword,
		})
		_node.Password = &value
	}
	if value, ok := fc.mutation.FeedTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedTitle,
		})
		_node.FeedTitle = value
	}
	if value, ok := fc.mutation.FeedDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedDescription,
		})
		_node.FeedDescription = value
	}
	if value, ok := fc.mutation.FeedLink(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedLink,
		})
		_node.FeedLink = value
	}
	if value, ok := fc.mutation.FeedFeedLink(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedFeedLink,
		})
		_node.FeedFeedLink = value
	}
	if value, ok := fc.mutation.FeedUpdated(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedUpdated,
		})
		_node.FeedUpdated = value
	}
	if value, ok := fc.mutation.FeedPublished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedPublished,
		})
		_node.FeedPublished = value
	}
	if value, ok := fc.mutation.FeedAuthor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedAuthor,
		})
		_node.FeedAuthor = value
	}
	if value, ok := fc.mutation.FeedAuthors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedAuthors,
		})
		_node.FeedAuthors = value
	}
	if value, ok := fc.mutation.FeedLanguage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedLanguage,
		})
		_node.FeedLanguage = value
	}
	if value, ok := fc.mutation.FeedImage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedImage,
		})
		_node.FeedImage = value
	}
	if value, ok := fc.mutation.FeedCopyright(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedCopyright,
		})
		_node.FeedCopyright = value
	}
	if value, ok := fc.mutation.FeedGenerator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedGenerator,
		})
		_node.FeedGenerator = value
	}
	if value, ok := fc.mutation.FeedCategories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: feed.FieldFeedCategories,
		})
		_node.FeedCategories = value
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feed.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feed.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: feed.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := fc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   feed.ItemsTable,
			Columns: []string{feed.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: item.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.SubscribedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   feed.SubscribedUsersTable,
			Columns: feed.SubscribedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubscriptionCreate{config: fc.config, mutation: newSubscriptionMutation(fc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   feed.SubscriptionsTable,
			Columns: []string{feed.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FeedCreateBulk is the builder for creating many Feed entities in bulk.
type FeedCreateBulk struct {
	config
	builders []*FeedCreate
}

// Save creates the Feed entities in the database.
func (fcb *FeedCreateBulk) Save(ctx context.Context) ([]*Feed, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feed, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedCreateBulk) SaveX(ctx context.Context) []*Feed {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
