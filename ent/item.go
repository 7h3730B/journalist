// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mrusme/journalist/ent/feed"
	"github.com/mrusme/journalist/ent/item"
)

// Item is the model entity for the Item schema.
type Item struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemQuery when eager-loading is set.
	Edges      ItemEdges `json:"edges"`
	feed_items *uuid.UUID
}

// ItemEdges holds the relations/edges for other nodes in the graph.
type ItemEdges struct {
	// Feed holds the value of the feed edge.
	Feed *Feed `json:"feed,omitempty"`
	// ReadByUsers holds the value of the read_by_users edge.
	ReadByUsers []*User `json:"read_by_users,omitempty"`
	// Reads holds the value of the reads edge.
	Reads []*Read `json:"reads,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FeedOrErr returns the Feed value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ItemEdges) FeedOrErr() (*Feed, error) {
	if e.loadedTypes[0] {
		if e.Feed == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: feed.Label}
		}
		return e.Feed, nil
	}
	return nil, &NotLoadedError{edge: "feed"}
}

// ReadByUsersOrErr returns the ReadByUsers value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ReadByUsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.ReadByUsers, nil
	}
	return nil, &NotLoadedError{edge: "read_by_users"}
}

// ReadsOrErr returns the Reads value or an error if the edge
// was not loaded in eager-loading.
func (e ItemEdges) ReadsOrErr() ([]*Read, error) {
	if e.loadedTypes[2] {
		return e.Reads, nil
	}
	return nil, &NotLoadedError{edge: "reads"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldID:
			values[i] = new(uuid.UUID)
		case item.ForeignKeys[0]: // feed_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case item.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field feed_items", values[j])
			} else if value.Valid {
				i.feed_items = new(uuid.UUID)
				*i.feed_items = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryFeed queries the "feed" edge of the Item entity.
func (i *Item) QueryFeed() *FeedQuery {
	return (&ItemClient{config: i.config}).QueryFeed(i)
}

// QueryReadByUsers queries the "read_by_users" edge of the Item entity.
func (i *Item) QueryReadByUsers() *UserQuery {
	return (&ItemClient{config: i.config}).QueryReadByUsers(i)
}

// QueryReads queries the "reads" edge of the Item entity.
func (i *Item) QueryReads() *ReadQuery {
	return (&ItemClient{config: i.config}).QueryReads(i)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
