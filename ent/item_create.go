// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mrusme/journalist/ent/feed"
	"github.com/mrusme/journalist/ent/item"
	"github.com/mrusme/journalist/ent/read"
	"github.com/mrusme/journalist/ent/user"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (ic *ItemCreate) SetTitle(s string) *ItemCreate {
	ic.mutation.SetTitle(s)
	return ic
}

// SetDescription sets the "description" field.
func (ic *ItemCreate) SetDescription(s string) *ItemCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetContent sets the "content" field.
func (ic *ItemCreate) SetContent(s string) *ItemCreate {
	ic.mutation.SetContent(s)
	return ic
}

// SetURL sets the "url" field.
func (ic *ItemCreate) SetURL(s string) *ItemCreate {
	ic.mutation.SetURL(s)
	return ic
}

// SetAuthor sets the "author" field.
func (ic *ItemCreate) SetAuthor(s string) *ItemCreate {
	ic.mutation.SetAuthor(s)
	return ic
}

// SetImage sets the "image" field.
func (ic *ItemCreate) SetImage(s string) *ItemCreate {
	ic.mutation.SetImage(s)
	return ic
}

// SetCategories sets the "categories" field.
func (ic *ItemCreate) SetCategories(s string) *ItemCreate {
	ic.mutation.SetCategories(s)
	return ic
}

// SetCrawledTitle sets the "crawled_title" field.
func (ic *ItemCreate) SetCrawledTitle(s string) *ItemCreate {
	ic.mutation.SetCrawledTitle(s)
	return ic
}

// SetCrawledAuthor sets the "crawled_author" field.
func (ic *ItemCreate) SetCrawledAuthor(s string) *ItemCreate {
	ic.mutation.SetCrawledAuthor(s)
	return ic
}

// SetCrawledExcerpt sets the "crawled_excerpt" field.
func (ic *ItemCreate) SetCrawledExcerpt(s string) *ItemCreate {
	ic.mutation.SetCrawledExcerpt(s)
	return ic
}

// SetCrawledSiteName sets the "crawled_site_name" field.
func (ic *ItemCreate) SetCrawledSiteName(s string) *ItemCreate {
	ic.mutation.SetCrawledSiteName(s)
	return ic
}

// SetCrawledImage sets the "crawled_image" field.
func (ic *ItemCreate) SetCrawledImage(s string) *ItemCreate {
	ic.mutation.SetCrawledImage(s)
	return ic
}

// SetCrawledContentHTML sets the "crawled_content_html" field.
func (ic *ItemCreate) SetCrawledContentHTML(s string) *ItemCreate {
	ic.mutation.SetCrawledContentHTML(s)
	return ic
}

// SetCrawledContentText sets the "crawled_content_text" field.
func (ic *ItemCreate) SetCrawledContentText(s string) *ItemCreate {
	ic.mutation.SetCrawledContentText(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *ItemCreate) SetCreatedAt(t time.Time) *ItemCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *ItemCreate) SetNillableCreatedAt(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *ItemCreate) SetUpdatedAt(t time.Time) *ItemCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *ItemCreate) SetNillableUpdatedAt(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ItemCreate) SetID(u uuid.UUID) *ItemCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *ItemCreate) SetNillableID(u *uuid.UUID) *ItemCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// SetFeedID sets the "feed" edge to the Feed entity by ID.
func (ic *ItemCreate) SetFeedID(id uuid.UUID) *ItemCreate {
	ic.mutation.SetFeedID(id)
	return ic
}

// SetNillableFeedID sets the "feed" edge to the Feed entity by ID if the given value is not nil.
func (ic *ItemCreate) SetNillableFeedID(id *uuid.UUID) *ItemCreate {
	if id != nil {
		ic = ic.SetFeedID(*id)
	}
	return ic
}

// SetFeed sets the "feed" edge to the Feed entity.
func (ic *ItemCreate) SetFeed(f *Feed) *ItemCreate {
	return ic.SetFeedID(f.ID)
}

// AddReadByUserIDs adds the "read_by_users" edge to the User entity by IDs.
func (ic *ItemCreate) AddReadByUserIDs(ids ...uuid.UUID) *ItemCreate {
	ic.mutation.AddReadByUserIDs(ids...)
	return ic
}

// AddReadByUsers adds the "read_by_users" edges to the User entity.
func (ic *ItemCreate) AddReadByUsers(u ...*User) *ItemCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ic.AddReadByUserIDs(ids...)
}

// AddReadIDs adds the "reads" edge to the Read entity by IDs.
func (ic *ItemCreate) AddReadIDs(ids ...uuid.UUID) *ItemCreate {
	ic.mutation.AddReadIDs(ids...)
	return ic
}

// AddReads adds the "reads" edges to the Read entity.
func (ic *ItemCreate) AddReads(r ...*Read) *ItemCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ic.AddReadIDs(ids...)
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Item)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ItemCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ItemCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ItemCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := item.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := item.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := item.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Item.title"`)}
	}
	if _, ok := ic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Item.description"`)}
	}
	if _, ok := ic.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Item.content"`)}
	}
	if _, ok := ic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Item.url"`)}
	}
	if v, ok := ic.mutation.URL(); ok {
		if err := item.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Item.url": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Item.author"`)}
	}
	if _, ok := ic.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Item.image"`)}
	}
	if _, ok := ic.mutation.Categories(); !ok {
		return &ValidationError{Name: "categories", err: errors.New(`ent: missing required field "Item.categories"`)}
	}
	if _, ok := ic.mutation.CrawledTitle(); !ok {
		return &ValidationError{Name: "crawled_title", err: errors.New(`ent: missing required field "Item.crawled_title"`)}
	}
	if _, ok := ic.mutation.CrawledAuthor(); !ok {
		return &ValidationError{Name: "crawled_author", err: errors.New(`ent: missing required field "Item.crawled_author"`)}
	}
	if _, ok := ic.mutation.CrawledExcerpt(); !ok {
		return &ValidationError{Name: "crawled_excerpt", err: errors.New(`ent: missing required field "Item.crawled_excerpt"`)}
	}
	if _, ok := ic.mutation.CrawledSiteName(); !ok {
		return &ValidationError{Name: "crawled_site_name", err: errors.New(`ent: missing required field "Item.crawled_site_name"`)}
	}
	if _, ok := ic.mutation.CrawledImage(); !ok {
		return &ValidationError{Name: "crawled_image", err: errors.New(`ent: missing required field "Item.crawled_image"`)}
	}
	if _, ok := ic.mutation.CrawledContentHTML(); !ok {
		return &ValidationError{Name: "crawled_content_html", err: errors.New(`ent: missing required field "Item.crawled_content_html"`)}
	}
	if _, ok := ic.mutation.CrawledContentText(); !ok {
		return &ValidationError{Name: "crawled_content_text", err: errors.New(`ent: missing required field "Item.crawled_content_text"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Item.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Item.updated_at"`)}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: item.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: item.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ic.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := ic.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := ic.mutation.Author(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldAuthor,
		})
		_node.Author = value
	}
	if value, ok := ic.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := ic.mutation.Categories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCategories,
		})
		_node.Categories = value
	}
	if value, ok := ic.mutation.CrawledTitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledTitle,
		})
		_node.CrawledTitle = value
	}
	if value, ok := ic.mutation.CrawledAuthor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledAuthor,
		})
		_node.CrawledAuthor = value
	}
	if value, ok := ic.mutation.CrawledExcerpt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledExcerpt,
		})
		_node.CrawledExcerpt = value
	}
	if value, ok := ic.mutation.CrawledSiteName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledSiteName,
		})
		_node.CrawledSiteName = value
	}
	if value, ok := ic.mutation.CrawledImage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledImage,
		})
		_node.CrawledImage = value
	}
	if value, ok := ic.mutation.CrawledContentHTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledContentHTML,
		})
		_node.CrawledContentHTML = value
	}
	if value, ok := ic.mutation.CrawledContentText(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldCrawledContentText,
		})
		_node.CrawledContentText = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.FeedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   item.FeedTable,
			Columns: []string{item.FeedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: feed.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.feed_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ReadByUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   item.ReadByUsersTable,
			Columns: item.ReadByUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReadCreate{config: ic.config, mutation: newReadMutation(ic.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.ReadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   item.ReadsTable,
			Columns: []string{item.ReadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: read.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	builders []*ItemCreate
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ItemCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ItemCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
